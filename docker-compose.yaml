version: "3.8"
services:
  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    container_name: 'rabbitmq'
    ports:
        - 15672:15672
    volumes:
      - ${HOME}/.docker-conf/rabbitmq/data/:/${HOME}/data/rabbitmq/
      - ${HOME}/.docker-conf/rabbitmq/log/:/${HOME}/logs/rabbitmq/
    networks:
        - app-network
        

  server_b:
    build:
      context: ./backend/server_b
    container_name: 'server_b'
    networks:
      - app-network
    depends_on:
      - "rabbitmq"
    command: sh -c '/bin/wait-for-it.sh rabbitmq:5672 --timeout=60 -- node server_b.js'

  server_a:
    build:
      context: ./backend/server_a
    container_name: 'server_a'
    ports:
      - 3001:8079
    networks:
      - app-network
    depends_on:
      - "server_b"
    command: sh -c '/bin/wait-for-it.sh rabbitmq:5672 --timeout=60 -- node server_a.js'
    environment:
      CREATE_SANDWICH_API_KEY: sub30
  # postgres database used to store orders, users, sandwiches. not persistent after restart
  db:
    image: postgres:15
    container_name: 'db'
    restart: unless-stopped
    environment:
      POSTGRES_USER: unknown
      POSTGRES_PASSWORD: h8737f5242fsdocf32mof
      POSTGRES_DB: MAKEMESANDWICH_DB
    ports:
      - 5432:5432
    networks:
      - app-network
  # db monitor system. can be used from browser
  adminer:
    image: adminer:4.8.1
    container_name: 'adminer'
    restart: unless-stopped
    ports:
      - 8080:8080
    networks:
      - app-network

  frontend:
    build: ./frontend
    container_name: 'frontend_container'
    ports:
      - '3000:3000'
    depends_on:
      - "server_a"
    # Set true to run container in interactive mode (opposite of detached, the container wont shut down on its own)
    stdin_open: true
    tty: true

networks:
  app-network:
    driver: bridge
